import * as GoogleProtobufTimestamp from "secretjs/src/grpc_gateway/google/protobuf/timestamp.pb";
import * as TendermintTypesTypes from "secretjs/src/grpc_gateway/tendermint/types/types.pb";
import * as TendermintTypesValidator from "secretjs/src/grpc_gateway/tendermint/types/validator.pb";
declare type Absent<T, K extends keyof T> = {
    [k in Exclude<keyof T, K>]?: undefined;
};
declare type OneOf<T> = {
    [k in keyof T]?: undefined;
} | (keyof T extends infer K ? (K extends string & keyof T ? {
    [k in K]: T[K];
} & Absent<T, K> : never) : never);
declare type BaseEvidence = {};
export declare type Evidence = BaseEvidence & OneOf<{
    duplicate_vote_evidence: DuplicateVoteEvidence;
    light_client_attack_evidence: LightClientAttackEvidence;
}>;
export declare type DuplicateVoteEvidence = {
    vote_a?: TendermintTypesTypes.Vote;
    vote_b?: TendermintTypesTypes.Vote;
    total_voting_power?: string;
    validator_power?: string;
    timestamp?: GoogleProtobufTimestamp.Timestamp;
};
export declare type LightClientAttackEvidence = {
    conflicting_block?: TendermintTypesTypes.LightBlock;
    common_height?: string;
    byzantine_validators?: TendermintTypesValidator.Validator[];
    total_voting_power?: string;
    timestamp?: GoogleProtobufTimestamp.Timestamp;
};
export declare type EvidenceList = {
    evidence?: Evidence[];
};
export {};
//# sourceMappingURL=evidence.pb.d.ts.map